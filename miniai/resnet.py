# AUTOGENERATED! DO NOT EDIT! File to edit: ../notebooks/13_resnets.ipynb.

# %% auto 0
__all__ = ['act_gr', 'conv_block', 'ResBlock']

# %% ../notebooks/13_resnets.ipynb 1
import pickle,gzip,math,os,time,shutil,torch,matplotlib as mpl,numpy as np,matplotlib.pyplot as plt
import fastcore.all as fc
from collections.abc import Mapping
from pathlib import Path
from operator import attrgetter,itemgetter
from functools import partial
from copy import copy
from contextlib import contextmanager

import torchvision.transforms.functional as TF,torch.nn.functional as F
from torch import tensor,nn,optim
from torch.utils.data import DataLoader,default_collate
from torch.nn import init
from torch.optim import lr_scheduler
from torcheval.metrics import MulticlassAccuracy
from datasets import load_dataset,load_dataset_builder

from .datasets import *
from .conv import *
from .learner import *
from .activations import *
from .init import *
from .sgd import *

# %% ../notebooks/13_resnets.ipynb 4
act_gr = partial(GeneralRelu, leak=0.1, sub=0.4)

# %% ../notebooks/13_resnets.ipynb 10
def conv_block(n_inputs, n_filters, stride, act=act_gr, norm=None, kernal_size=3):
    return nn.Sequential(conv(n_inputs, n_filters, stride=1, act=act, norm=norm, ks=kernal_size), # Filter change happens here
                         conv(n_filters, n_filters, stride=stride, act=None, norm=norm, ks=kernal_size)) # Stride occurs here, No activation here, that happens after the identity is added.
                        
class ResBlock(nn.Module):
    def __init__(self, n_inputs, n_filters, stride=1, kernal_size=3, act=act_gr, norm=None):
        super().__init__()
        self.convs = conv_block(n_inputs, n_filters, stride, act=act_gr, norm=norm, kernal_size=kernal_size)
        self.idconv = fc.noop if n_inputs==n_filters else conv(n_inputs, n_filters, ks=1, stride=1, act=None) # makes filter change to identity block
        self.pool = fc.noop if stride==1 else nn.AvgPool2d(2, ceil_mode=True) # handles the stride for the identity block
        self.act = act()
    
    def forward(self, x): return self.act(self.convs(x) + self.idconv(self.pool(x)))


